{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			}
		},
		"_artifactsLocationOHSTemplate": {
			"defaultValue": "[if(contains(parameters('_artifactsLocation'), 'githubusercontent'), parameters('_artifactsLocation'), deployment().properties.templateLink.uri)]",
			"type": "string",
			"metadata": {
				"description": "If we are deploying from the command line, use the passed in _artifactsLocation, otherwise use the default."
			}
		},
		"_artifactsLocationSasToken": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
			}
		},
		"guidValue": {
			"type": "string",
			"defaultValue": "[newGuid()]"
		},
		"keyType": {
			"type": "string",
			"defaultValue": "PKCS12",
			"allowedValues": [
				"JKS",
				"PKCS12"
			],
			"metadata": {
				"description": "Provide Key type is JKS or PKCS12 signed certificates"
			}
		},
		"location": {
			"type": "string",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"ohsComponentName": {
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server component name"
			}
		},
		"ohsDomainName": {
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server domain name"
			}
		},
		"ohsSSLKeystoreData": {
			"type": "string",
			"metadata": {
				"description": "The name of the secret in the specified KeyVault whose value is the SSL Certificate Data"
			}
		},
		"ohsSSLKeystorePassword": {
			"type": "string",
			"metadata": {
				"description": "The name of the secret in the specified KeyVault whose value is the password for the SSL Certificate"
			}
		},
		"oracleVaultPswd": {
			"type": "string",
			"metadata": {
				"description": "Password for Oracle Vault store"
			}
		}
	},
	"variables": {
		"const_imageOffer": "[variables('name_ohsSkuUrnVersion')[0]]",
		"const_imagePublisher": "oracle",
		"const_linuxConfiguration": {
			"disablePasswordAuthentication": true,
			"ssh": {
				"publicKeys": [
					{
						"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
						"keyData": "[parameters('adminPasswordOrKey')]"
					}
				]
			}
		},
		"const_publicIPAddressType": "Dynamic",
		"const_vmSize": "[parameters('vmSizeSelect')]",
		"name_linuxImageOfferSKU": "[variables('name_ohsSkuUrnVersion')[1]]",
		"name_linuxImageVersion": "[variables('name_ohsSkuUrnVersion')[2]]",
		"name_nic": "_NIC",
		"name_ohsSkuUrnVersion": "[split(parameters('ohsSkuUrnVersion'), ';')]",
		"name_outputOHSHost": "[concat(parameters('ohsVMName'),variables('name_publicIPAddress'))]",
		"name_publicIPAddress": "_PublicIP",
		"name_scriptFile": "setupOHS.sh",
		"name_wlsDomainName": "wlsd",
		"name_subnet": "Subnet",
		"ref_subnet": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('name_subnet'))]"
	},
	"resources": [
		{
			"type": "Microsoft.Network/networkSecurityGroups/securityRules",
			"name": "[concat( parameters('networkSecurityGroup'),'/','OHSPorts')]",
			"apiVersion": "2020-06-01",
			"properties": {
				"protocol": "TCP",
				"sourcePortRange": "*",
				"destinationAddressPrefix": "*",
				"access": "Allow",
				"priority": 200,
				"direction": "Inbound",
				"destinationPortRanges": "[split(concat(parameters('ohshttpPort'),',',parameters('ohshttpsPort')), ',')]",
				"sourceAddressPrefix": "*"
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2020-06-01",
			"name": "[concat(parameters('ohsVMName'),variables('name_publicIPAddress'))]",
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "[variables('const_publicIPAddressType')]",
				"dnsSettings": {
					"domainNameLabel": "[concat(toLower(parameters('dnsLabelPrefix')),'-',take(replace(parameters('guidValue'), '-', ''), 10),'-',toLower(parameters('ohsDomainName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks/subnets",
			"apiVersion": "2020-06-01",
			"name": "[concat(parameters('virtualNetworkName'), '/', variables('name_subnet'))]",
			"condition": "[and(empty(parameters('virtualNetworkName')), empty(variables('name_subnet')))]"
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-06-01",
			"name": "[concat(parameters('ohsVMName'), variables('name_nic'))]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/publicIPAddresses/', concat(parameters('ohsVMName'),variables('name_publicIPAddress')))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('ohsVMName'),variables('name_publicIPAddress')))]"
							},
							"subnet": {
								"id": "[variables('ref_subnet')]"
							}
						}
					}
				],
				"dnsSettings": {
					"internalDnsNameLabel": "[parameters('ohsVMName')]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-06-01",
			"name": "[parameters('ohsVMName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('ohsVMName'), variables('name_nic')))]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[variables('const_vmSize')]"
				},
				"osProfile": {
					"computerName": "[parameters('ohsVMName')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPasswordOrKey')]",
					"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('const_linuxConfiguration'))]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('const_imagePublisher')]",
						"offer": "[variables('const_imageOffer')]",
						"sku": "[variables('name_linuxImageOfferSKU')]",
						"version": "[variables('name_linuxImageVersion')]"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					},
					"dataDisks": [
						{
							"lun": 0,
							"createOption": "FromImage",
							"diskSizeGB": 900,
							"managedDisk": {
								"storageAccountType": "StandardSSD_LRS"
							}
						}
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('ohsVMName'), variables('name_nic')))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2019-06-01').primaryEndpoints.blob]"
					}
				}
			},
			"plan": {
				"name": "[variables('name_linuxImageOfferSKU')]",
				"publisher": "[variables('const_imagePublisher')]",
				"product": "[variables('const_imageOffer')]"
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(parameters('ohsVMName'),'/newuserscript')]",
			"apiVersion": "2020-06-01",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/virtualMachines/', parameters('ohsVMName'))]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[uri(parameters('_artifactsLocationOHSTemplate'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('sh setupOHS.sh',' ',parameters('ohsDomainName'),' ',parameters('ohsComponentName'),' ',base64(parameters('ohsSSLKeystoreData')),' ',base64(parameters('ohsSSLKeystorePassword')),' ',parameters('oracleVaultPswd'),' ',parameters('keyType'))]"
				}
			}
		}
	],
	"outputs": {
		"ohsAccessURL": {
			"type": "string",
			"value": "[concat('http://',reference(variables('name_outputOHSHost'), '2020-06-01').dnsSettings.fqdn,':',parameters('ohshttpPort'))]"
		},
		"ohsSecureAccessURL": {
			"type": "string",
			"value": "[concat('https://',reference(variables('name_outputOHSHost'), '2020-06-01').dnsSettings.fqdn,':',parameters('ohshttpsPort'))]"
		}
	}
}
